'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _menu = require('antd/lib/menu');

var _menu2 = _interopRequireDefault(_menu);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _layout = require('antd/lib/layout');

var _layout2 = _interopRequireDefault(_layout);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('antd/lib/menu/style/css');

require('antd/lib/icon/style/css');

require('antd/lib/layout/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _router = require('dva/router');

var _logo = require('../../assets/logo.svg');

var _logo2 = _interopRequireDefault(_logo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  'logo': 'antd-pro-sider-menu-logo',
  'sider': 'antd-pro-sider-menu-sider'
};
var Sider = _layout2.default.Sider;
var SubMenu = _menu2.default.SubMenu;

var SiderMenu = function (_PureComponent) {
  _inherits(SiderMenu, _PureComponent);

  function SiderMenu(props) {
    _classCallCheck(this, SiderMenu);

    // 把一级 Layout 的 children 作为菜单项
    var _this = _possibleConstructorReturn(this, (SiderMenu.__proto__ || Object.getPrototypeOf(SiderMenu)).call(this, props));

    _this.onCollapse = function (collapsed) {
      _this.props.dispatch({
        type: 'global/changeLayoutCollapsed',
        payload: collapsed
      });
    };

    _this.handleOpenChange = function (openKeys) {
      var lastOpenKey = openKeys[openKeys.length - 1];
      var isMainMenu = _this.menus.some(function (item) {
        return lastOpenKey && (item.key === lastOpenKey || item.path === lastOpenKey);
      });
      _this.setState({
        openKeys: isMainMenu ? [lastOpenKey] : [].concat(_toConsumableArray(openKeys))
      });
    };

    _this.menus = props.navData.reduce(function (arr, current) {
      return arr.concat(current.children);
    }, []);
    _this.state = {
      openKeys: _this.getDefaultCollapsedSubMenus(props)
    };
    return _this;
  }

  _createClass(SiderMenu, [{
    key: 'getDefaultCollapsedSubMenus',
    value: function getDefaultCollapsedSubMenus(props) {
      var currentMenuSelectedKeys = [].concat(_toConsumableArray(this.getCurrentMenuSelectedKeys(props)));
      currentMenuSelectedKeys.splice(-1, 1);
      if (currentMenuSelectedKeys.length === 0) {
        return ['dashboard'];
      }
      return currentMenuSelectedKeys;
    }
  }, {
    key: 'getCurrentMenuSelectedKeys',
    value: function getCurrentMenuSelectedKeys(props) {
      var _ref = props || this.props,
          pathname = _ref.location.pathname;

      var keys = pathname.split('/').slice(1);
      if (keys.length === 1 && keys[0] === '') {
        return [this.menus[0].key];
      }
      return keys;
    }
  }, {
    key: 'getNavMenuItems',
    value: function getNavMenuItems(menusData) {
      var _this2 = this;

      var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (!menusData) {
        return [];
      }
      return menusData.map(function (item) {
        if (!item.name) {
          return null;
        }
        var itemPath = void 0;
        if (item.path.indexOf('http') === 0) {
          itemPath = item.path;
        } else {
          itemPath = (parentPath + '/' + (item.path || '')).replace(/\/+/g, '/');
        }
        if (item.children && item.children.some(function (child) {
          return child.name;
        })) {
          return _react2.default.createElement(
            SubMenu,
            {
              title: item.icon ? _react2.default.createElement(
                'span',
                null,
                _react2.default.createElement(_icon2.default, { type: item.icon }),
                _react2.default.createElement(
                  'span',
                  null,
                  item.name
                )
              ) : item.name,
              key: item.key || item.path
            },
            _this2.getNavMenuItems(item.children, itemPath)
          );
        }
        var icon = item.icon && _react2.default.createElement(_icon2.default, { type: item.icon });
        return _react2.default.createElement(
          _menu2.default.Item,
          { key: item.key || item.path },
          /^https?:\/\//.test(itemPath) ? _react2.default.createElement(
            'a',
            { href: itemPath, target: item.target },
            icon,
            _react2.default.createElement(
              'span',
              null,
              item.name
            )
          ) : _react2.default.createElement(
            _router.Link,
            {
              to: itemPath,
              target: item.target,
              replace: itemPath === _this2.props.location.pathname
            },
            icon,
            _react2.default.createElement(
              'span',
              null,
              item.name
            )
          )
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var collapsed = this.props.collapsed;

      // Don't show popup menu when it is been collapsed

      var menuProps = collapsed ? {} : {
        openKeys: this.state.openKeys
      };
      return _react2.default.createElement(
        Sider,
        {
          trigger: null,
          collapsible: true,
          collapsed: collapsed,
          breakpoint: 'md',
          onCollapse: this.onCollapse,
          width: 256,
          className: styles.sider
        },
        _react2.default.createElement(
          'div',
          { className: styles.logo },
          _react2.default.createElement(
            _router.Link,
            { to: '/' },
            _react2.default.createElement('img', { src: _logo2.default, alt: 'logo' }),
            _react2.default.createElement(
              'h1',
              null,
              'Ant Design Pro'
            )
          )
        ),
        _react2.default.createElement(
          _menu2.default,
          _extends({
            theme: 'dark',
            mode: 'inline'
          }, menuProps, {
            onOpenChange: this.handleOpenChange,
            selectedKeys: this.getCurrentMenuSelectedKeys(),
            style: { padding: '16px 0', width: '100%' }
          }),
          this.getNavMenuItems(this.menus)
        )
      );
    }
  }]);

  return SiderMenu;
}(_react.PureComponent);

exports.default = SiderMenu;
module.exports = exports['default'];